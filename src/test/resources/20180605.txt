## 软件测试基本概念
### 什么是软件测试
* 经典定义：在规定条件下对程序进行操作，已发现错误，对软件质量进行评估
* 有资料表明60%的软件错误不是程序错误，而是分析和设计错误。于是提倡测试概念扩大化，软件全生命周期测试
### 软件测试与CMMI
* 传统软件测试 只是软件开发过程中的一个特定阶段，且只针对软件成品进行测试
* 全面质量管理的理论认为：软件的高质量是开发和设计出来的，不是测试出来的。因此伴随着软件开发过程模型和技术的不断发展，软件测试理论和技术也有相应发展
* 软件测试由最初的只针对软件成品扩展到针对软件半成品和过程产品的全过程测试。贯穿软件开发的全过程，包括软件需求分析/软件概要设计/软件详细设计/编码/集成/验收等各个工程阶段
* CMMI模型主张在开发过程中注重对过程和产品的度量，以量化的形式提供对管理过程的支持，以及对过程进行相应的评估和改进
### 测试用例
* 测试用例 指 执行条件和预期结果的集合，是为达到最佳测试效果而精心设计的少量测试数据
* 测试用例=输入+输出+测试环境
* 测试用例的评价标准：
    高层次：以满足某一个测试目标或测试任务来整体看测试用例，衡量一组测试用例的结构/设计思路和覆盖率等指标
    低层次：从单个测试用例看，衡量其描述的规范性/可理解性和可维护性等指标
* 测试用例设计的基本原则 ：测试用例的代表性/测试结果的可判断性和可再现性
### 测试环境
* 测试环境=软件+硬件+网络+历史数据
* 测试环境的规划/搭建/维护和管理
### 软件测试人员的要求

## 软件测试原理
### 测试原则
* 所有的测试都应该追溯到用户需求
* 应当把“尽早测试和不断地进行软件测试”作为软件测试者的座右铭
* Pareto 原则应用于软件测试。Pareto原则暗示着80%的错误很可能来自程序模块的20%
* 测试应从小规模开始，逐步转向大规模
* 穷举测试是不可能的，然而充分覆盖程序逻辑是可能的
* 为了达到最佳效果，应由独立的第三方来构造测试
* 不充分的测试是不负责任，过分的测试是资源浪费，同样也是不负责任的表现
### 软件测试分类
* 按测试阶段分类：单元测试/集成测试/确认测试/系统测试/验收测试
    单元测试：主要依据是程序代码和详细设计文档。根据设计文档/编码规范和注释，从程序内部结构出发，查看代码是否符合设计/规范以及注释的相关说明。单元测试应结合使用黑盒与白盒测试方法
    集成测试：与单元测试同步进行，查看其接口是否存在缺陷，主要依据是单元测试和概要设计文档
    系统测试：包含功能测试/性能测试/兼容性测试/用户界面测试，主要依据是需求规格说明文档
    验收测试：分为内部测试和外部公测。
* 按是否需要执行被测软件分类
    静态测试：主要包括对源代码/程序界面和各类文档及中间产品所做的测试
    动态测试：
* 按是否需要查看代码分类
    黑盒测试：又称功能性测试或数据驱动测试，依据是各个阶段的需求规格说明。
    白盒测试：依据是源代码
    灰盒测试
* 按执行时是否需要人工干预
    手工测试
    自动测试：通常在功能测试/回归测试/性能测试中使用较广
* 其他测试类型
    冒烟测试/随机测试
### 软件测试流程
### 软件测试的过程模型
* V模型 是软件开发瀑布模型的变种，反映了测试活动与分析和设计的关系
* W模型 在V模型中增加各个开发阶段应同步进行的测试，基于尽早和不断的进行软件测试的原则
* H模型 将测试活动完全独立出来，形成一个完全独立的流程
* X模型 处理开发的所有方面，包括交接/频繁重复的集成以及需求文档的缺失等，还定位了 探索性测试